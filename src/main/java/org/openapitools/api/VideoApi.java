/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.openapitools.model.Comments;
import org.openapitools.model.GetDataVideoById200Response;
import org.openapitools.model.Video;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-15T15:54:30.961535300+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "video", description = "Operaciones sobre los videos")
public interface VideoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /video : Crea un video
     * Solo se podra hacer si el usuario ha iniciado sesion.
     *
     * @param video Crea un objeto Video (optional)
     * @return operacion exitosa (status code 200)
     */
    @Operation(
        operationId = "createVideo",
        summary = "Crea un video",
        description = "Solo se podra hacer si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "default", description = "operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Video.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Video> createVideo(
        @Parameter(name = "Video", description = "Crea un objeto Video") @Valid @RequestBody(required = false) Video video
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /video/preview/{id} : Borrar video
     * Solo se puede hacer si el usuario ha iniciado sesion.
     *
     * @param id El id del video a borrar (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "deleteVideo",
        summary = "Borrar video",
        description = "Solo se puede hacer si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/delete/{id}"
    )
    
    default ResponseEntity<Void> deleteVideo( @Parameter(name = "id", description = "El id por el que se busca. Usar 1 para testing.", required = true, in = ParameterIn.PATH) Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
    /**
     * GET /video/{id} : Hacer un get del video por su id
     * 
     *
     * @param id El id por el que se busca. Usar 1 para testing. (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "getVideoByid",
        summary = "Hacer un Get del video por su id",
        description = "",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Video.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/video/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Video> getVideoByid(
        @Parameter(name = "id", description = "El id por el que se busca. Usar 1 para testing.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /video/preview/{id} : Actualizar video
     * Solo puede utilizarse si el usuario ha iniciado sesion.
     *
     * @param id el id del video a modificar (required)
     * @param video Modifica el video en la aplicacion (optional)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "updateVideo",
        summary = "Actualizar video",
        description = "Solo puede utilizarse si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/edit",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateVideo(
        @Parameter(name = "Video", description = "Modifica el video en la aplicacion") @Valid @RequestBody(required = false) Video video
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
    
    /**
     * POST /video/comment/{id} : Añadir comentario al video
     * Solo puede utilizarse si el usuario ha iniciado sesión.
     *
     * @param id el id del video al que se añade el comentario (required)
     * @param comment el comentario a añadir (required)
     * @return operacion exitosa (status code 201)
     *         or Invalid video id supplied (status code 400)
     *         or video not found (status code 404)
     */
    @Operation(
        operationId = "addCommentToVideo",
        summary = "Añadir comentario al video",
        description = "Solo puede utilizarse si el usuario ha iniciado sesión.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Comentario añadido exitosamente"),
            @ApiResponse(responseCode = "400", description = "Invalid video id supplied"),
            @ApiResponse(responseCode = "404", description = "video not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/comment",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addComment(
    		@Parameter(name = "comment", description = "Comentario a añadir al video", required = true, in = ParameterIn.DEFAULT) @Valid @RequestBody Comments comment
    ) {
    	return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }

    /**
     * GET /video/comments/{id} : Obtener los comentarios de un video
     * Muestra todos los comentarios asociados a un video específico.
     *
     * @param id El id del video del que se desean obtener los comentarios (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid video id supplied (status code 400)
     *         or video not found (status code 404)
     */
    @Operation(
        operationId = "getCommentsForVideo",
        summary = "Obtener los comentarios de un video",
        description = "Muestra todos los comentarios asociados a un video específico.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid video id"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/video/{id}/comments",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Comments>> getCommentsForVideo(
        @Parameter(name = "id", description = "El id del video del que se desean obtener los comentarios", required = true, in = ParameterIn.PATH) @PathVariable("id") int id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    
    /**
     * GET /users/{id}/videos/ : Obtener una lista de videos de un usuario.
     *
     * @param id El id del usuario (required)
     * @return Operación exitosa (status code 200)
     *         or Invalid resource id supplied (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getVideosByUser",
        summary = "Obtener una lista de entidades asociadas a un recurso",
        description = "Muestra todas las entidades asociadas a un recurso específico.",
        tags = { "resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid resource id"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}/videos",
        produces = { "application/json" }
    )
     default ResponseEntity<List<Video>> getVideosbyUser(
        @Parameter(name = "id", description = "El id del usuario de los videos a obtener", required = true, in = ParameterIn.PATH) 
        @PathVariable("id") int id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /video/like : Da like a un video.
     *
     * @param videoId El ID del video a dar like
     * @param userId El ID del usuario que da like al video
     * @return Video liked con operación exitosa (status code 200)
     *         or Invalid video id supplied (status code 400)
     *         or Video not found (status code 404)
     */
    @Operation(
        operationId = "likeVideo",
        summary = "Da like a un video",
        description = "Incrementa el contador de likes de un video y devuelve el video con el contador actualizado.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid video id"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @PostMapping(
        value = "/video/like",
        consumes = { "application/json" },
        produces = { "application/json" }
    )
    default ResponseEntity<Void> likeVideo(
        @Parameter(name = "request", description = "VideoID and UserID", required = true) 
        @RequestBody Map<String, Long> requestBody
    ) {
        // Aquí iría la lógica para incrementar el contador de likes del video y 
        // asociar el like al usuario
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    
    /* ------------------------------ NUEVOS METODOS PARA RECOMENDACIONES ------------------------------------*/
    
    /**
     * GET /video/genre : Obtiene una lista de videos por género.
     *
     * @param genre El género de los videos a buscar
     * @return Lista de videos del género especificado con operación exitosa (status code 200)
     *         or Invalid genre supplied (status code 400)
     *         or Videos not found (status code 404)
     */
    @Operation(
        operationId = "getVideosByGenre",
        summary = "Obtiene una lista de videos por género",
        description = "Devuelve una lista de videos que pertenecen al género especificado.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid genre supplied"),
            @ApiResponse(responseCode = "404", description = "Videos not found")
        }
    )
    @GetMapping(
        value = "/video/genres",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getVideosByGenre(
        @Parameter(name = "genre", description = "Género de los videos", required = true) 
        @RequestParam String genre
    ) {
        // Aquí iría la lógica para recuperar los videos del género especificado
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /video/title/{query} : Obtiene una lista de videos por título parcial.
     *
     * @param title Parte del título de los videos a buscar
     * @return Lista de videos que contienen el título parcial especificado (status code 200)
     *         or Invalid title supplied (status code 400)
     *         or Videos not found (status code 404)
     */
    @Operation(
        operationId = "getVideosByTitle",
        summary = "Obtiene una lista de videos por título parcial",
        description = "Devuelve una lista de videos cuyo título contiene el texto especificado.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid title supplied"),
            @ApiResponse(responseCode = "404", description = "Videos not found")
        }
    )
    @GetMapping(
        value = "/video/title/{query}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getVideosByTitle(
        @Parameter(name = "query", description = "Parte del título de los videos", required = true)
        @PathVariable("query") String query
    ) {
        // Aquí iría la lógica para recuperar los videos con títulos coincidentes
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /videos/{id}/countLikes : Obtiene el número de likes de un video por su ID.
     *
     * @param id ID del video
     * @return Número de likes del video especificado (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Video not found (status code 404)
     */
    @Operation(
        operationId = "countLikesByVideoId",
        summary = "Obtiene el número de likes de un video por su ID",
        description = "Devuelve el total de likes que tiene el video especificado por su ID.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @GetMapping(
        value = "/videos/{id}/countLikes",
        produces = { "application/json" }
    )
    default ResponseEntity<Integer> countLikesByVideoId(
        @Parameter(name = "id", description = "ID del video", required = true)
        @PathVariable Long id
    ) {
        // Aquí iría la lógica para recuperar el número de likes del video con el ID especificado
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /videos/{id}/views : Obtiene el número de views de un video por su ID.
     *
     * @param id ID del video
     * @return Número de views del video especificado (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Video not found (status code 404)
     */
    @Operation(
        operationId = "countViewsByVideoId",
        summary = "Obtiene el número de views de un video por su ID",
        description = "Devuelve el total de views que tiene el video especificado por su ID.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @GetMapping(
        value = "/videos/{id}/views",
        produces = { "application/json" }
    )
    default ResponseEntity<Long> countViewsByVideoId(
        @Parameter(name = "id", description = "ID del video", required = true)
        @PathVariable Long id
    ) {
        // Aquí iría la lógica para recuperar el número de likes del video con el ID especificado
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /videos/top : Obtiene el top de videos ordenados por número de views.
     *
     * @return Lista de videos ordenados por número de views (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getTopVideos",
        summary = "Obtiene el top de videos ordenados por número de views",
        description = "Devuelve una lista de videos ordenados de mayor a menor según el número de vistas.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/videos/top",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getTopVideos() {
        // Aquí iría la lógica para recuperar el top de videos ordenados por vistas
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /videos/user/{id}/randomVideos : Obtiene videos aleatorios de un usuario específico.
     *
     * @param id El ID del usuario (required)
     * @return Lista de videos aleatorios (status code 200)
     *         or Invalid user ID supplied (status code 400)
     *         or User not found or no videos available (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getRandomVideosByUserId",
        summary = "Obtiene videos aleatorios de un usuario específico",
        description = "Devuelve una lista de videos aleatorios pertenecientes a un usuario dado por su ID.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid user ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found or no videos available"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/videos/user/{id}/randomVideos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getRandomVideosByUserId(
        @Parameter(name = "id", description = "ID del usuario", required = true)
        @PathVariable Long id
    ) {
        // Aquí iría la lógica para recuperar videos aleatorios de un usuario
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * POST /video/unlike : Quita un "Me gusta" a un video.
     *
     * @return Operación exitosa (status code 200)
     *         or ID de video inválido (status code 400)
     *         or Error en la conexión a la base de datos (status code 500)
     */
    @Operation(
        operationId = "unlikeVideo",
        summary = "Quita un 'Me gusta' a un video.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "ID de video inválido"),
            @ApiResponse(responseCode = "500", description = "Error en la conexión a la base de datos")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/unlike"
    )
    default ResponseEntity<Void> unlikeVideo(@RequestBody Map<String, Long> requestBody) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * POST /video/view : Registra una vista para un video.
     *
     * @return Operación exitosa (status code 200)
     *         or Error al registrar la vista (status code 400)
     *         or Error en la conexión a la base de datos (status code 500)
     */
    @Operation(
        operationId = "addView",
        summary = "Registra una vista para un video.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Error al registrar la vista"),
            @ApiResponse(responseCode = "500", description = "Error en la conexión a la base de datos")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/view"
    )
    default ResponseEntity<Void> addView(@RequestBody Map<String, Long> payload) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * POST /video/deleteById : Elimina todos los videos de un usuario.
     *
     * @return Operación exitosa (status code 200)
     *         or Error al eliminar los videos (status code 400)
     *         or Error en la conexión a la base de datos (status code 500)
     */
    @Operation(
        operationId = "deleteVideosByUserId",
        summary = "Elimina todos los videos de un usuario.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Error al eliminar los videos"),
            @ApiResponse(responseCode = "500", description = "Error en la conexión a la base de datos")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/deleteById"
    )
    default ResponseEntity<Void> deleteVideosByUserId(@RequestBody Long userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * POST /comments/deleteById : Elimina todos los comentarios de un usuario.
     *
     * @return Operación exitosa (status code 200)
     *         or Error al eliminar los comentarios (status code 400)
     *         or Error en la conexión a la base de datos (status code 500)
     */
    @Operation(
        operationId = "deleteCommentsByUserId",
        summary = "Elimina todos los comentarios de un usuario.",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Error al eliminar los comentarios"),
            @ApiResponse(responseCode = "500", description = "Error en la conexión a la base de datos")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/comments/deleteById"
    )
    default ResponseEntity<Void> deleteCommentsByUserId(@RequestBody Long userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }




}
